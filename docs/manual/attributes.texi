@node Node Attributes, Using the XSLT Support, XML Nodes <1>, Top
@chapter Node Attributes

It is possible for every element type node in an XML node tree to have
attributes. Attributes are nothing more than a collection of name value
pairs. In xmlwrapp, attributes are accessed using the
@code{xml::attributes} class. This chapter will show you how to work
with objects of this class.

@menu
* Accessing Individual Attributes::
* Adding and Replacing Attributes::
* Removing Attributes::
@end menu

@node Accessing Individual Attributes, Adding and Replacing Attributes, , Node Attributes
@section Accessing Individual Attributes

The @code{xml::attributes} class is a container of node attributes. It
would be pretty useless if there was no way to access the individual
attributes inside of it. Iterators come to the rescue again.  Just like
the other xmlwrapp classes, iterators are used to access the attributes
stored inside the @code{xml::attributes} class.

@menu
* Attribute Iterators::
* Begin and End::
* Finding Attributes::
@end menu

@node Attribute Iterators, Begin and End, , Accessing Individual Attributes
@subsection Attribute Iterators

The @code{xml::attributes::iterator} and
@code{xml::attributes::const_iterator} classes point to a
@code{xml::attributes::attr} object. This object is what gives you
access to the name and value of a given attribute. In future versions of
xmlwrapp, you will be able to use this class to access the attribute's
namespace.

@noindent
@anchor{Using Attribute Iterators}

@strong{Using Attribute Iterators}

@example


xml::attributes attrs;

...

xml::attributes::iterator i(attrs.begin());

if (i != attrs.end()) @{
    std::cout << " name: " << i->get_name() << "\n";
    std::cout << "value: " << i->get_value() << "\n";
@}


@end example

@node Begin and End, Finding Attributes, Attribute Iterators, Accessing Individual Attributes
@subsection Begin and End

If you just wanted to iterate through the attributes, you can use the
@code{xml::attributes::begin} and the @code{xml::attributes::end} member
functions. They both return either a @code{xml::attributes::iterator} or
@code{xml::attributes::const_iterator} object depending on whether the
@code{xml::attributes} object is const or not.

@node Finding Attributes, , Begin and End, Accessing Individual Attributes
@subsection Finding Attributes

When you want to locate an attribute with a given name, you can use the
@code{xml::attributes::find} member function. It will return an iterator
that points to the found attribute or an iterator that is equal to the
iterators that the @code{xml::attributes::end} function returns.

There is a small difference between the @code{xml::attributes::find}
function and just using the @code{xml::attributes::begin} function to
iterate over the attributes. If the attributes belong to a
@code{xml::document} object that has been validated, the
@code{xml::attributes::find} function may return an attribute that was
not given in the XML document but contains a default value in the DTD.

If you are asking the @code{xml::attributes::find} function to find an
attribute that has a default value, but was present in the XML document,
the document version of the attribute is returned.

@node Adding and Replacing Attributes, Removing Attributes, Accessing Individual Attributes, Node Attributes
@section Adding and Replacing Attributes

Since only one attribute with a given name can exist in a node at any
one time, the same function can be used to both add and replace
attributes. When attempting to add an attribute who has the same name as
another attribute in the container, the old attribute will be removed
before the new one is inserted.

To add or replace an attribute, you can use the
@code{xml::attributes::insert} member function. It takes the name and
value for the attribute to insert.

@node Removing Attributes, , Adding and Replacing Attributes, Node Attributes
@section Removing Attributes

There are two ways to remove an attribute from a @code{xml::attributes}
object. Both involve a call to the @code{xml::attributes::erase} member
function. You can remove an attribute by name, or using an iterator that
points to the attribute you wish to remove.

