@node Working with XML Documents, XML Nodes <1>, Parsing XML, Top
@chapter Working with XML Documents

The @code{xml::document} class encapsulates the notion of an XML
document. When parsing XML documents with the @code{xml::tree_parser},
you will be working with @code{xml::document} objects so that you can
access the resulting node tree.

Using the @code{xml::document} class is not limited to working with the
@code{xml::tree_parser} class. You can also use it when you want to
generate an XML document. In this case, you will build the node tree by
hand, and then use one of the @code{xml::document} member functions to
convert or save the node tree as XML data.

@menu
* Document Settings::
* Internal and External Subsets::
* Validating the Document::
* Processing XInclusions::
* Accessing Document Children::
* Accessing the Root Node::
* Setting the Root Node::
* Converting and Saving the Document as XML::
@end menu

@node Document Settings, Internal and External Subsets, , Working with XML Documents
@section Document Settings

Although the @code{xml::document} class is mainly a container for the
node tree, it does contain some settings that apply to the entire XML
document. The @code{xml::document} class provides member functions for
getting and setting of these values. The following table illustrates
which document settings are available.

@strong{Available Document Settings}

@multitable @columnfractions 0.25 0.25 0.25 0.25
@item
Setting@tab Description@tab Get Member Function@tab Set Member Function
@item
Version@tab The version from the <?xml?> processing instruction.@tab @code{get_version}@tab @code{set_version}
@item
Encoding@tab The document encoding from the <?xml?> processing instruction.@tab @code{get_encoding}@tab @code{set_encoding}
@item
Stand Alone@tab Whether or not the document is marked standalone in the <?xml?> processing instruction.@tab @code{get_is_standalone}@tab @code{set_is_standalone}
@end multitable

You should consult the xmlwrapp API reference for more information about
these member functions.

@node Internal and External Subsets, Validating the Document, Document Settings, Working with XML Documents
@section Internal and External Subsets

The XML document may contain either an internal or external subset, both
or no subsets at all. The @code{xml::document} provides member functions
to test for the existence of subsets.  The are the
@code{has_internal_subset} and @code{has_external_subset} functions.

An internal subset is present when document type definitions are placed
inside the XML document itself. This can be useful if you did not want
to use an external DTD or if you wanted to override something from the
external DTD.

If the XML document references an external DTD file or URL, it is said
to have an external subset. This is the most common type of subset.

@node Validating the Document, Processing XInclusions, Internal and External Subsets, Working with XML Documents
@section Validating the Document

@menu
* Validating with DOCTYPE::
* Validating with Any DTD::
@end menu

@node Validating with DOCTYPE, Validating with Any DTD, , Validating the Document
@subsection Validating with DOCTYPE

If the XML document contains either an internal or external subset, you
can use the @code{validate} member function to validate the XML document
against the subsets. This function will return @code{true} if the
document is valid.

When the document is not valid, or it does not contain an internal or
external subset, the @code{validate} function will return @code{false}.

@node Validating with Any DTD, , Validating with DOCTYPE, Validating the Document
@subsection Validating with Any DTD

If the XML document does not contain an internal or external subset, or
when you want to validate the document against a specific external
subset, you can use an overloaded version of the @code{validate} member
function. The overloaded version takes the name of a file or a URL to an
external subset to validate the document against.

Like the other @code{validate} function, this one will return
@code{true} if the document is valid according to the given external
subset. In this case, the external subset will be attached to the
document for further use. For example, to provide default attribute
values.

If the external entity cannot be parsed, or the document is not valid,
the @code{validate} will return @code{false}.

@node Processing XInclusions, Accessing Document Children, Validating the Document, Working with XML Documents
@section Processing XInclusions

If you would like xmlwrapp to search the node tree and process any
XInclusions (@code{<xi:include> elements}), you can use the
@code{process_xinclude} member function. It will return an @code{int}
telling you how many substitutions were preformed.

@node Accessing Document Children, Accessing the Root Node, Processing XInclusions, Working with XML Documents
@section Accessing Document Children

Although an XML document may only contain one element type node (the
root node), it may contain more than one child.  For example, there may
be XML comments above the root node's opening tag, or below the root
node's closing tag. In this case, those comments would be children of
the @code{xml::document} object.

You can access these children using @code{xml::node::iterator}
objects. The @code{xml::document} class provides @code{begin} and
@code{end} member functions for getting iterators to the children. For
more information about node iterators, see @ref{Accessing a Node's
Children}.

@node Accessing the Root Node, Setting the Root Node, Accessing Document Children, Working with XML Documents
@section Accessing the Root Node

The most frequently used child node of the XML document is the root
node. As mentioned above, the root node is the only child node of the
document that is an element.

In order to save you time and effort finding the root node, the
@code{xml::document} class provides the @code{get_root_node} member
function. This function will return a reference to the root node for the
document.

@node Setting the Root Node, Converting and Saving the Document as XML, Accessing the Root Node, Working with XML Documents
@section Setting the Root Node

If you wanted to set the root node of the document to some other element
node, you can use the @code{set_root_node} member function. This will
create a copy of the given node and use it and the root node for the
document. If the document already had a root node, it will be removed
and deleted.

@node Converting and Saving the Document as XML, , Setting the Root Node, Working with XML Documents
@section Converting and Saving the Document as XML

The @code{xml::document} provides a few different member functions for
converting the node tree into XML. The following table will summarize
these functions.

@strong{Functions to Convert to XML}

@multitable @columnfractions 0.5 0.5
@item
Member Function@tab Description
@item
save_to_string@tab Convert the node tree to XML and place the results in a given std::string object.
@item
save_to_file@tab Convert the node tree to XML and save the results into the given file name.
@item
operator<<@tab Convert the node tree to XML and insert the results into the given std::ostream object.
@end multitable
